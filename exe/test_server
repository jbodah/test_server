#! /usr/bin/env ruby

$: << 'test'
require 'test_server'
require 'optparse'

options = {
  remote: false,
  sock: "test.sock",
  preload: %(require "test_helper"),
  after_fork: ""
}

OptionParser.new do |opts|
  opts.banner = "Usage: test_server [OPTIONS] [TEST...]"

  opts.on("--serve", "Boot the server") do |mode|
    options[:mode] = :serve
  end

  opts.on("--test", "Push a test to the server") do |mode|
    options[:mode] = :push
  end

  opts.on("--notify", "Send system notification based on test result") do |notify|
    options[:notify_on_fail] = notify
    options[:notify_on_pass] = notify
  end

  opts.on("--notify-on-pass", "Send system notification when the test passes") do |notify|
    options[:notify_on_pass] = notify
  end

  opts.on("--notify-on-fail", "Send system notification when the test fails") do |notify|
    options[:notify_on_fail] = notify
  end

  opts.on("--socket FILE", "Socket file to use") do |sock|
    options[:sock] = sock
  end

  opts.on("--preload CODE", "Ruby code to run before forking (default: \"require 'test_helper'\")") do |code|
    options[:preload] = code
  end

  opts.on("--after-fork CODE", "Ruby code to run immediately after forking (default: \"\")") do |code|
    options[:after_fork] = code
  end

  opts.on("--forward-exit-code", "Calling process will exit with the fork child's exit code") do |forward_exit_code|
    options[:forward_exit_code] = forward_exit_code
  end
end.parse!

options[:files] = ARGV
TestServer.run!(options)
